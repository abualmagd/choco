datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  name          String?
  phone         String?
  avatar        String?
  role          Role          @default(CUSTOMER)
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  wishlist      WishlistItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  //auth columns 
  sessions      Session[]
  accounts      Account[] 
}

enum Role {
  CUSTOMER
  ADMIN
  MODERATOR
}



model Session {
  id        String   @id @unique 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Account {
  id                 String  @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int     
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  @@unique([provider, providerAccountId])
}


model Address {
  id          Int       @id @default(autoincrement())
  street      String
  city        String
  state       String
  country     String
  isDefault   Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  order Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  discounts   Discount[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  price       Decimal
  compareAtPrice Decimal?
  costPrice   Decimal?
  sku         String?
  barcode     String?
  brand       String?
  trackInventory Boolean @default(true)
  inventoryQuantity Int  @default(0)
  allowBackorder Boolean @default(false)
  weight      Float?
  height      Float?
  width       Float?
  length      Float?
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  isDigital   Boolean   @default(false)
  downloadUrl String?
  seoTitle    String?
  seoDescription String?
  categories  Category[]
  variants    ProductVariant[]
  images      ProductImage[]
  reviews     Review[]
  cartItem     CartItem[]
  orderItem     OrderItem[]
  wishlistItem WishlistItem[]
  discounts Discount[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([name])
  @@index([price])
  @@index([isActive])
  @@index([isFeatured])
  @@index([createdAt])
 
  

}

model ProductVariant {
  id          Int       @id @default(autoincrement())
  name        String
  sku         String?
  price       Decimal
  compareAtPrice Decimal?
  inventoryQuantity Int @default(0)
  optionValues Json
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  images      ProductImage[]
  cartItems CartItem[]
  orderItems OrderItem[]
  wishlistItems WishlistItem[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  @@index([price])
  
  
  
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  url         String
  altText     String?
  isPrimary   Boolean   @default(false)
  order       Int       @default(0)
  product     Product?  @relation(fields: [productId], references: [id])
  productId   Int?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Review {
  id          Int       @id @default(autoincrement())
  rating      Int       
  title       String
  comment     String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   Int?
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([cartId])
  @@index([productId])
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  subtotal    Decimal
  tax         Decimal
  shipping    Decimal
  discount    Decimal
  total       Decimal
  status      OrderStatus @default(PENDING)
  shippingAddress Address? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int?
  paymentMethod String
  paymentStatus PaymentStatus @default(UNPAID)
  trackingNumber String?
  shippingMethod String?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   Int?
  price       Decimal
  quantity    Int
  total       Decimal
  createdAt   DateTime  @default(now())

  @@index([orderId])
  @@index([productId])
}

model WishlistItem {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   Int?
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([productId])
}

model Discount {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  type        DiscountType
  value       Decimal
  minOrder    Decimal?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean     @default(true)
  maxUses     Int?
  usedCount   Int         @default(0)
  products    Product[]
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}